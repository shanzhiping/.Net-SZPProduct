//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SZP.Web.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="WcfServiceLibrary1", ConfigurationName="ServiceReference1.IServiceInstance")]
    public interface IServiceInstance {
        
        [System.ServiceModel.OperationContractAttribute(Action="WcfServiceLibrary1/IService1/Add", ReplyAction="WcfServiceLibrary1/IService1/AddResponse")]
        double Add(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="WcfServiceLibrary1/IService1/Subtract", ReplyAction="WcfServiceLibrary1/IService1/SubtractResponse")]
        double Subtract(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="WcfServiceLibrary1/IService1/Multiply", ReplyAction="WcfServiceLibrary1/IService1/MultiplyResponse")]
        double Multiply(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="WcfServiceLibrary1/IService1/Divide", ReplyAction="WcfServiceLibrary1/IService1/DivideResponse")]
        double Divide(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="WcfServiceLibrary1/IServiceInstance/GetConcurrencyMode", ReplyAction="WcfServiceLibrary1/IServiceInstance/GetConcurrencyModeResponse")]
        string GetConcurrencyMode();
        
        [System.ServiceModel.OperationContractAttribute(Action="WcfServiceLibrary1/IServiceInstance/GetOperationCount", ReplyAction="WcfServiceLibrary1/IServiceInstance/GetOperationCountResponse")]
        int GetOperationCount();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceInstanceChannel : SZP.Web.ServiceReference1.IServiceInstance, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceInstanceClient : System.ServiceModel.ClientBase<SZP.Web.ServiceReference1.IServiceInstance>, SZP.Web.ServiceReference1.IServiceInstance {
        
        public ServiceInstanceClient() {
        }
        
        public ServiceInstanceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceInstanceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceInstanceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceInstanceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double n1, double n2) {
            return base.Channel.Add(n1, n2);
        }
        
        public double Subtract(double n1, double n2) {
            return base.Channel.Subtract(n1, n2);
        }
        
        public double Multiply(double n1, double n2) {
            return base.Channel.Multiply(n1, n2);
        }
        
        public double Divide(double n1, double n2) {
            return base.Channel.Divide(n1, n2);
        }
        
        public string GetConcurrencyMode() {
            return base.Channel.GetConcurrencyMode();
        }
        
        public int GetOperationCount() {
            return base.Channel.GetOperationCount();
        }
    }
}
